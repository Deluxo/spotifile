{"name":"Spotifile","tagline":"FUSE file system for Spotify","body":"spotifile [![Build Status](https://travis-ci.org/catharsis/spotifile.svg?branch=master)](https://travis-ci.org/catharsis/spotifile) \r\n=========\r\n\r\n[FUSE](http://fuse.sourceforge.net/) file system for [Spotify](https://www.spotify.com)\r\n\r\nThe aim of this project is to provide a synthethic file system\r\nas an interface towards [Spotify](https://www.spotify.com). That includes, for example, being able\r\nto check the state of your session by doing:\r\n\r\n    $ cat /home/alofgren/spotifile/connection\r\n    logged in\r\n\r\nBrowsing!\r\n\r\n    $ cd /home/alofgren/spotifile/playlists/meta/That\\ Handsome\\ Devil\r\n    $ ls\r\n    lrwxrwxrwx 0 alofgren root 56 Jul 23 13:45 $=♡ -> ../../browse/tracks/spotify:track:3idPftQBuIvi0Mbpz7UUcc\r\n    lrwxrwxrwx 0 alofgren root 56 Jul 23 13:45 70's Tuxedos -> ../../browse/tracks/spotify:track:275q2JSSckOAvPFF22ivc3\r\n    lrwxrwxrwx 0 alofgren root 56 Jul 23 13:45 Adapt -> ../../browse/tracks/spotify:track:0FR8IORfrowXozk4AmN210\r\n    lrwxrwxrwx 0 alofgren root 56 Jul 23 13:45 A Drink to Death -> ../../browse/tracks/spotify:track:1RcVweLcA8SjfJlJH3tR2K\r\n    lrwxrwxrwx 0 alofgren root 56 Jul 23 13:45 Becky's New Car -> ../../browse/tracks/spotify:track:3Y22h4qDSUQtrqB1VD6VEC\r\n    lrwxrwxrwx 0 alofgren root 56 Jul 23 13:45 Bored -> ../../browse/tracks/spotify:track:0PncakcV6gutcv4ps2MBK1\r\n    lrwxrwxrwx 0 alofgren root 56 Jul 23 13:45 Bullet Math -> ../../browse/tracks/spotify:track:20J7iJSATwrvRQR3enxFN3\r\n    ...\r\n    \r\nPlayback!\r\n\r\n    $ cd /home/alofgren/spotifile/playlists/music/Hank\\ Williams\r\n    $ mplayer 16\\ -\\ Long\\ Gone\\ Lonesome\\ Blues.wav\r\n\r\n\r\nand so forth.\r\n\r\n![gif](http://i.imgur.com/jP91r79.gif)\r\n## Installation\r\n\r\n### Arch Linux\r\nA PKGBUILD for the latest released version is available in the [AUR](https://aur.archlinux.org/packages/spotifile/).\r\n\r\n### Installing from source\r\nTo install **spotifile** from source, do the following\r\n```Shell\r\n$ git clone git@github.com:catharsis/spotifile.git spotifile && cd spotifile\r\n$ autoreconf -si\r\n$ ./configure && make && make check && make install\r\n```\r\nMake sure you have all the required dependencies installed, or the ./configure step will likely complain loudly.\r\n\r\n## Quick start\r\nThe easiest way to get started with **spotifile** is to create a mountpoint somewhere (say, `mkdir /tmp/spotifile`) and run it like so `./spotifile -o username=spotify_username -o password=spotify_password /tmp/spotifile`. However, that's not recommendable since it'll leave your [Spotify](https://www.spotify.com) credentials in the open for anyone else with access to your machine. Instead, most users should opt to create a configuration file `~/.config/spotifile/spotifile.conf`, containing the credentials as such;\r\n\r\n    [spotify]\r\n    username=myUsername\r\n    password=myPassword\r\nDepending on your situation, it is likely a good idea to set as restrictive permissions on the file as possible - it does contain sensitive data after all!\r\n\r\n    chmod 600 ~/.config/spotifile/spotifile.conf\r\n\r\nNow, you can leave out the credentials from the command line;\r\n\r\n    ./spotifile /tmp/spotifile\r\n\r\nIf everything goes as expected, you should now be able to `cd` to `/tmp/spotifile`, and check your connection status like this;\r\n\r\n    $ cd /tmp/spotifile\r\n    $ cat connection\r\n    logged in\r\n\r\nTo unmount the **spotifile**, simply run `fusermount -u -z /tmp/spotifile`.\r\n\r\n## Usage\r\nBefore all else, let's consider the directory structure of a running **spotifile** instance, and briefly discuss its contents:\r\n    \r\n    $ ls -AlF\r\n    total 0\r\n    dr-x------ 0 alofgren root 0 Aug  7 09:59 browse/\r\n    dr-x------ 0 alofgren root 0 Aug  7 09:59 playlists/\r\n    -r--r----- 0 alofgren root 0 Aug  7 09:59 connection\r\n\r\n\r\nIn its current state, the root directory is pretty simple. It contains two directories, `browse` and `playlists`, as well as a file `connection` which contains a textual description of the current state of your [Spotify](https://www.spotify.com) connection. The main entrypoint in **spotifile** to your [Spotify](https://www.spotify.com) data is through the `playlists` directory, which in turn contains two subdirectories `meta` and `music`. As you might expect, listing the contents of these directories will show you your familiar playlists. For me, that looks something like:\r\n\r\n    $ ls -AlF playlists/meta/\r\n    total 0\r\n    dr-x------ 0 alofgren root 0 Aug  7 10:00 .357 String Band /\r\n    dr-x------ 0 alofgren root 0 Aug  7 10:00 3 Inches of Blood/\r\n    dr-x------ 0 alofgren root 0 Aug  7 10:00 Alaskan Fishermen – Alaskan Fishermen/\r\n    dr-x------ 0 alofgren root 0 Aug  7 10:00 Antic Clay/\r\n    dr-x------ 0 alofgren root 0 Aug  7 10:00 Arsonists/\r\n    dr-x------ 0 alofgren root 0 Aug  7 10:00 At The Gates — Slaughter Of The Soul/\r\n    dr-x------ 0 alofgren root 0 Aug  7 10:00 Bathory/\r\n    dr-x------ 0 alofgren root 0 Aug  7 10:00 Behemoth/\r\n    dr-x------ 0 alofgren root 0 Aug  7 10:00 Blandat/\r\n    dr-x------ 0 alofgren root 0 Aug  7 10:00 Blaze Foley/\r\n    dr-x------ 0 alofgren root 0 Aug  7 10:00 Brown Bird/\r\n    dr-x------ 0 alofgren root 0 Aug  7 10:00 Burzum — Filosofem/\r\n    dr-x------ 0 alofgren root 0 Aug  7 10:00 Candlemass - Epicus Doomicus Metallicus/\r\n    # ... snip ...\r\n\r\nFor the `music` directory, which exists to make playback more convenient, each track is represented by a .wav file:\r\n\r\n    $ ls -AlF playlists/music/Arsonists/\r\n    total 0\r\n    -r--r----- 0 alofgren root 0 Jun 20  2011 00 - Intro.wav\r\n    -r--r----- 0 alofgren root 0 Jun 20  2011 01 - Backdraft.wav\r\n    -r--r----- 0 alofgren root 0 Jun 20  2011 02 - Shit Ain’t Sweet.wav\r\n    -r--r----- 0 alofgren root 0 Jun 20  2011 03 - Pyromaniax.wav\r\n    # ... snip ...\r\n\r\nFor the `meta` directory, each of its subdirectories in turn contain a collection of symlinks - one for each track in the playlist - pointing to the respective `track` directories in the `browse` directory. For example:\r\n\r\n    $ ls -AlF playlists/meta/Arsonists/\r\n    total 0\r\n    lrwxrwxrwx 0 alofgren root 56 Jun 20  2011 Alive -> ../../browse/tracks/spotify:track:5LEz8sfYIneF9la9icV9G0/\r\n    lrwxrwxrwx 0 alofgren root 56 Jun 20  2011 Backdraft -> ../../browse/tracks/spotify:track:1iqvZV4BcMpV81WVJBuBTw/\r\n    lrwxrwxrwx 0 alofgren root 56 Jun 20  2011 Blaze -> ../../browse/tracks/spotify:track:247py70aNT1jbDmnZGj3wL/\r\n    # ... snip ...\r\n\r\nThe targets of these links are created *lazily*, meaning that they are materialized only as something referring to them is inspected by the user, such as the symlinks above. As you might've already guessed - or observed, if you've strayed from the beaten path of this guide - this means that in a newly started **spotifile** instance, the `browse` directory only contains three empty directories:\r\n\r\n    $ tree browse\r\n    browse\r\n    ├── albums\r\n    ├── artists\r\n    └── tracks\r\n    \r\n    3 directories, 0 files\r\n\r\nThis pattern of lazy creation is repeated throughout **spotifile**, for all main \"objects\" (currently artists, albums, and tracks). Speaking of which, let's inspect one of these browse directories:\r\n\r\n    $ $ ls -AlF browse/tracks/spotify:track:0xAyc8r3C1BNQzzDMKbOkw\r\n    total 0\r\n    dr-x------ 0 alofgren root 0 Aug  7 10:19 artists/\r\n    -r--r----- 0 alofgren root 0 Aug  7 10:19 autolinked\r\n    -r--r----- 0 alofgren root 0 Aug  7 10:19 disc\r\n    -r--r----- 0 alofgren root 0 Aug  7 10:19 duration\r\n    -r--r----- 0 alofgren root 0 Aug  7 10:19 index\r\n    -r--r----- 0 alofgren root 0 Aug  7 10:19 local\r\n    -r--r----- 0 alofgren root 0 Aug  7 10:19 name\r\n    -r--r----- 0 alofgren root 0 Aug  7 10:19 offlinestatus\r\n    -r--r----- 0 alofgren root 0 Aug  7 10:19 popularity\r\n    -r--r----- 0 alofgren root 0 Aug  7 10:19 starred\r\n    -r--r----- 0 alofgren root 0 Aug  7 10:19 track.wav\r\n\r\nFirst and foremost, the name of the directory is a [URI](https://en.wikipedia.org/wiki/Uniform_resource_identifier), which uniquely identifies the resource the directory contains. If you've ever shared tracks with other [Spotify](https://www.spotify.com) users, you've likely seen one before. Most of the files in the directory are (or should be) self-explanatory. The `duration` file, for example, contains the number of milliseconds the track lasts, and the contents of the `starred` track indicate whether the track is \"starred\" or not.\r\n\r\nThe `track.wav` file is the actual music (if it's a music track we're looking at, and not an audiobook, or something), and should be playable by most of the music players on your system.\r\n\r\nThe `artists` directory contains links to all the artists performing on this track:\r\n\r\n    ls -AlF browse/tracks/spotify:track:0xAyc8r3C1BNQzzDMKbOkw/artists\r\n    total 0\r\n    lrwxrwxrwx 0 alofgren root 54 Aug  7 10:28 Arsonists -> ../../../artists/spotify:artist:4VQ9fD75w7JlKZDIZKtpdf/\r\n\r\nLooking inside of that directory, we see more information on the artist:\r\n\r\n    ls -AlF browse/tracks/spotify:track:0xAyc8r3C1BNQzzDMKbOkw/artists/Arsonists/\r\n    total 0\r\n    dr-x------ 0 alofgren root 0 Aug  7 10:28 albums/\r\n    dr-x------ 0 alofgren root 0 Aug  7 10:28 portraits/\r\n    -r--r----- 0 alofgren root 0 Aug  7 10:28 biography\r\n    -r--r----- 0 alofgren root 0 Aug  7 10:28 name\r\n\r\nAnd that's the whole tour for now! \r\n\r\n## Contributing\r\nUser interaction & engagement is thoroughly encouraged! **spotifile** is still in active development and your feedback is very likely to impact the future direction of the project.\r\n\r\nPlease report issues, feature requests and general feedback in the GitHub issue tracker. Bug requests should preferrably include as detailed steps to reproduce as you can manage (for extra credit, try to find a minimal test case that reproduces the bug). Please also include the output from `spotifile -d <mountpoint>` when reporting bugs, as it makes tracking them down that much easier.\r\n\r\nCode contributions are of course very welcome, but I'd appreciate it if you'd go through the trouble of opening an issue or shoot me an e-mail before you start hacking so that we may discuss the change before any code is written. Needless to say, this doesn't necessarily apply to trivial fixes (like typo corrections) or obvious bug fixes (like segfaults). If you have a patch that you think would be neat to include, either open a pull request on GitHub, or send me a patch-mail directly.\r\n\r\n## Oh dear, why?\r\nFor fun, mostly. But also because I've been looking for a media playing solution that is both scriptable and ties into my otherwise somewhat minimalistic desktop environment nicely. I think this approach is not as crazy as it might initially sound for those purposes. It's worth a shot at least, yes?\r\n\r\n## dependencies\r\n> * libspotify\r\n> * fuse >= 2.6\r\n> * autotools\r\n> * GLib2","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}